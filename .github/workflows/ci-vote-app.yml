name: CI/CD para VoteApp

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Clonar repositorio
      uses: actions/checkout@v3

    - name: Configurar Java 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Instalar Maven
      run: sudo apt-get install -y maven

    - name: Ejecutar app Spring Boot
      run: |
        nohup mvn spring-boot:run &  # Ejecuta la app en segundo plano
        sleep 30  # Asegúrate de que la app esté completamente levantada
        echo "Aplicación en ejecución..."

    - name: Compilar proyecto
      run: mvn clean install -DskipTests=true "-Dskip.jmeter=true" "-Dskip.postman=true"

  test:
    runs-on: ubuntu-latest
    needs: build

    services:
      selenium:
        image: selenium/standalone-chrome:125.0
        ports:
          - 4444:4444
        options: --shm-size=2g

    steps:
    - name: Clonar repositorio
      uses: actions/checkout@v3

    - name: Configurar Java 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Instalar Maven
      run: sudo apt-get install -y maven

    - name: Configurar Docker
      uses: docker/setup-buildx-action@v2

    - name: Ejecutar app Spring Boot
      run: |
        nohup mvn spring-boot:run &  # App backend activa en segundo plano
        sleep 30  # Asegura que Spring Boot esté completamente levantado

    - name: Pruebas Unitarias y Autónomas
      run: mvn test -Dtest=!RegisterFormGUITest

    - name: Pruebas de carga con JMeter
      run: mvn jmeter:jmeter

    - name: Copiar logs de JMeter
      run: mvn antrun:run@move-jmeter-logs

    # Pruebas GUI con Selenium están comentadas
    # - name: Pruebas GUI con Selenium
    #   run: mvn test -Dtest=RegisterFormGUITest

    # Definición de URL del backend comentada
    # - name: Definir URL del backend
    #   run: echo "VOTEAPP_URL=http://springboot-app:8080/" >> $GITHUB_ENV

    # Pruebas API con Postman (Newman via Docker) comentadas
    # - name: Pruebas API con Postman (Newman via Docker)
    #   run: |
    #     docker run --rm \
    #       -v "${{ github.workspace }}/src/test/java/com/vote/demo/postman:/etc/newman" \
    #       postman/newman run /etc/newman/vote-demo.postman_collection.json

  deploy:
    runs-on: ubuntu-latest
    needs: test
    steps:
    - name: Desplegar en Vercel
      run: |
        curl -X POST https://api.vercel.com/v12/deployments \
          -H "Authorization: Bearer ${{ secrets.VERCEL_TOKEN }}" \
          -d '{"name":"your-project-name","gitSource":{"type":"github","repoId":"your-repository-id","branch":"main"}}'
